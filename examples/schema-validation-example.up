# Example: Schema Validation
# Demonstrates runtime schema validation in UP

# Example 1: Reference schema by file path
server!file://./schemas/server.up-schema {
  host localhost
  port!int 8080
  timeout!dur 30s
  tls_enabled!bool false
  replicas!int 3
}

# Example 2: Multiple servers with same schema
servers [
  server!file://./schemas/server.up-schema {
    host api.example.com
    port!int 443
    tls_enabled!bool true
    tls_cert_path /etc/ssl/certs/api.crt
    tls_key_path /etc/ssl/private/api.key
    replicas!int 5
  }
  server!file://./schemas/server.up-schema {
    host internal.example.com
    port!int 8080
    tls_enabled!bool false
    replicas!int 2
  }
]

# Example 3: Using schema type mappings (requires .up-schemas file)
# production_server!server {
#   host prod.example.com
#   port!int 443
#   tls_enabled!bool true
# }

# Example 4: Validation will catch errors
# This would fail validation if uncommented:
# invalid_server!file://./schemas/server.up-schema {
#   host localhost
#   # Missing required field: port
#   replicas!int 999  # Exceeds maximum of 100
# }

# Example 5: Schema with URL reference
# remote_server!https://schemas.uplang.org/server/1.0.0 {
#   host remote.example.com
#   port!int 8443
# }

# Note: To run with validation:
#   up parse -i schema-validation-example.up
#
# To skip validation:
#   up parse -i schema-validation-example.up --no-validate
#
# To validate with strict mode:
#   up validate -i schema-validation-example.up --strict

